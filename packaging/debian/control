Source: charliecloud
Priority: optional
Maintainer: Oliver Freyermuth <freyermuth@physik.uni-bonn.de>
Build-Depends:
 debhelper (>= 9),
 python,
 python-sphinx,
 python-sphinx-rtd-theme,
 rsync,
Standards-Version: 3.9.8
Homepage: https://hpc.github.io/charliecloud/

Package: charliecloud
Architecture: any
Section: admin
Depends: ${misc:Depends}, ${shlibs:Depends}
Description: Lightweight user-defined software stacks for
 high-performance computing.
 Charliecloud provides user-defined software stacks (UDSS) for
 high-performance computing (HPC) centers. This "bring your own
 software stack" functionality addresses needs such as: software
 dependencies that are numerous, complex, unusual, diferently
 configured, or simply newer/older than what the center provides;
 build-time requirements unavailable within the center, such as
 relatively unfettered internet access; validated software stacks and
 configuration to meet the standards of a particular field of inquiry;
 portability of environments between resources, including workstations
 and other test and development system not managed by the center;
 consistent environments, even archivally so, that can be easily,
 reliabily, and verifiably reproduced in the future; and/or usability
 and comprehensibility.

Package: charliecloud-doc
Architecture: all
Section: doc
Depends: libjs-jquery, libjs-underscore, libjs-mathjax
Description: Lightweight user-defined software stacks for
 high-performance computing, documentation package.
 Charliecloud provides user-defined software stacks (UDSS) for
 high-performance computing (HPC) centers. This "bring your own
 software stack" functionality addresses needs such as: software
 dependencies that are numerous, complex, unusual, diferently
 configured, or simply newer/older than what the center provides;
 build-time requirements unavailable within the center, such as
 relatively unfettered internet access; validated software stacks and
 configuration to meet the standards of a particular field of inquiry;
 portability of environments between resources, including workstations
 and other test and development system not managed by the center;
 consistent environments, even archivally so, that can be easily,
 reliabily, and verifiably reproduced in the future; and/or usability
 and comprehensibility.
