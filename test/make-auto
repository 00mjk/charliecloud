#!/usr/bin/env python

from __future__ import print_function

import os.path
import sys

mode = sys.argv[1]

print("""\
# Do not edit this file; it's autogenerated.

load common
""")

for path in sys.argv[2:]:
   (d, f) = os.path.split(path)
   if (f == 'Dockerfile'):
      tag = os.path.basename(d)         # enclosing directory
   else:
      tag = os.path.splitext(f)[1][1:]  # extension

   if (mode == "build"):
      print("""\

@test 'docker-build %(tag)s' {
    docker-build -t $USER/%(tag)s --file=%(path)s ..
    docker_ok $USER/%(tag)s
}

@test 'ch-docker2tar %(tag)s' {
    TARBALL=$TARDIR/$USER.%(tag)s.tar.gz
    ch-docker2tar $USER/%(tag)s $TARDIR
    tarball_ok $TARBALL
}
""" % locals())

   if (mode == "run"):
      print("""\

@test 'ch-tar2dir %(tag)s' {
    TARBALL=$TARDIR/$USER.%(tag)s.tar.gz
    IMG=$IMGDIR/$USER.%(tag)s
    if [[ -d $IMG && -f $IMG/WEIRD_AL_YANKOVIC ]]; then
        # image exists, remove so we can test new unpack
        rm -Rf $IMG
    fi
    ch-tar2dir $TARBALL $IMG  # new unpack
    image_ok $IMG
    ch-tar2dir $TARBALL $IMG  # overwrite
    image_ok $IMG
}

@test 'ch-run %(tag)s /bin/true' {
    IMG=$IMGDIR/$USER.%(tag)s
    ch-run $IMG /bin/true
}

""" % locals())
