# ch-test-scope: full
FROM debian9

# A key goal of this Dockerfile is to demonstrate best practices for building
# OpenMPI for use inside a container.
#
# This OpenMPI aspires to work close to optimally on clusters with any of the
# following interconnects:
#
#    - Ethernet (TCP/IP)
#    - InfiniBand (IB)
#    - Omni-Path (OPA)
#    - RDMA over Converged Ethernet (RoCE) interconnects
#
# with no environment variables, command line arguments, or additional
# configuration files. Thus, we try to implement decisions at build time.
#
# This is a work in progress, and we're very interested in feedback.
#
# OpenMPI has numerous ways to communicate messages [1]. The ones relevant to
# this build and the interconnects they support are:
#
#   Module        Eth   IB    OPA   RoCE    note  decision
#   ------------  ----  ----  ----  ----    ----  --------
#
#   ob1 : tcp      Y*    X     X     X      a     include
#   ob1 : openib   N     Y     Y     Y      b,c   exclude
#   cm  : psm2     N     N     Y*    N            include
#       : ucx      Y?    Y*    N     Y?     b,d   include
#
#   Y : supported
#   Y*: best choice for that interconnect
#   X : supported but sub-optimal
#
#   a : No RDMA, so performance will suffer.
#   b : Uses libibverbs.
#   c : Will be removed in OpenMPI 4.
#   d : Uses Mellanox libraries if available in preference to libibverbs.
#
# You can check what's available with:
#
#   $ ch-run /var/tmp/openmpi -- ompi_info | egrep '(btl|mtl|pml)'
#
# The other build decisions are:
#
#   1. PMI/PMIx: Include these so that we can use srun or any other PMI[x]
#      provider, with no matching OpenMPI needed on the host.
#
#   2. --disable-pty-support to avoid "pipe function call failed when
#      setting up I/O forwarding subsystem".
#
#   3. --with-slurm=no so mpirun in the container doesn't try use Slurm to
#      launch processes, which will fail in inscrutable ways e.g. if srun is
#      not found. (If you do want Slurm launching processes, use srun or
#      mpirun outside the container.)
#
# [1]: https://github.com/open-mpi/ompi/blob/master/README

# OS packages needed to build this stuff.
RUN apt-get install -y --no-install-suggests \
    cmake \
    devscripts \
    file \
    flex \
    g++ \
    gcc \
    gfortran \
    git \
    hwloc-nox \
    less \
    libdb5.3-dev \
    libhwloc-dev \
    libnl-3-dev \
    libnl-route-3-dev \
    libnuma-dev \
    libpmi2-0-dev \
    libsystemd-dev \
    libudev-dev \
    make \
    ninja-build \
    pandoc \
    pkg-config \
    wget \
    udev \
    valgrind

WORKDIR /usr/local/src

# libpsm2. These packages don't appear to be available anywhere in binary form
# as of 2018-05-24 [1], so compile from source.
#
# Note that libpsm2 is x86_64 only [2].
#
# [1]: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=862313
# [2]: https://lists.debian.org/debian-hpc/2017/12/msg00015.html
ENV PSM2_VERSION 10.3-37-1
RUN git clone --branch debian/${PSM2_VERSION} --depth 1 \
              https://salsa.debian.org/hpc-team/libpsm2.git
RUN    cd libpsm2 \
    && debuild -i -us -uc -b
RUN dpkg --install libpsm2-2_${PSM2_VERSION}_amd64.deb \
                   libpsm2-dev_${PSM2_VERSION}_amd64.deb

# libibverbs. The packages in Stretch are old, and they aren't seeing OPA. See
# https://packages.debian.org/source/sid/rdma-core for what the various
# packages are.
ENV IBVERBS_VERSION 18.0-1
RUN git clone --branch debian/${IBVERBS_VERSION} --depth 1 \
              https://github.com/linux-rdma/rdma-core.git
RUN    cd rdma-core \
    && debuild -i -us -uc -b
RUN dpkg --install ibacm_${IBVERBS_VERSION}_amd64.deb \
                   ibverbs-providers_${IBVERBS_VERSION}_amd64.deb \
                   ibverbs-utils_${IBVERBS_VERSION}_amd64.deb \
                   libibumad-dev_${IBVERBS_VERSION}_amd64.deb \
                   libibumad3_${IBVERBS_VERSION}_amd64.deb \
                   libibverbs-dev_${IBVERBS_VERSION}_amd64.deb \
                   libibverbs1_${IBVERBS_VERSION}_amd64.deb \
                   librdmacm-dev_${IBVERBS_VERSION}_amd64.deb \
                   librdmacm1_${IBVERBS_VERSION}_amd64.deb \
                   rdma-core_${IBVERBS_VERSION}_amd64.deb \
                   rdmacm-utils_${IBVERBS_VERSION}_amd64.deb

# UCX. There is stuff to build Debian packages, but it seems not too polished.
ENV UCX_VERSION 1.2.2
RUN git clone --branch v${UCX_VERSION} --depth 1 \
              https://github.com/openucx/ucx.git
RUN    cd ucx \
    && ./autogen.sh \
    && ./contrib/configure-release --prefix=/usr \
    && make -j$(getconf _NPROCESSORS_ONLN) install

# OpenMPI.
ENV MPI_URL https://www.open-mpi.org/software/ompi/v2.1/downloads
ENV MPI_VERSION 2.1.3
RUN wget -nv ${MPI_URL}/openmpi-${MPI_VERSION}.tar.gz
RUN tar xf openmpi-${MPI_VERSION}.tar.gz
RUN    cd openmpi-${MPI_VERSION} \
    && CFLAGS=-O3 \
       CXXFLAGS=-O3 \
       ./configure --prefix=/usr \
                   --sysconfdir=/mnt/0 \
                   --with-pmi \
                   --with-pmi-libdir=/usr/lib/x86_64-linux-gnu \
                   --with-pmix \
                   --with-psm2 \
                   --with-ucx \
                   --disable-pty-support \
                   --enable-mca-no-build=btl-openib \
                   --with-slurm=no \
    && make -j$(getconf _NPROCESSORS_ONLN) install
RUN rm -Rf openmpi-${MPI_VERSION}*

# OpenMPI expects this program to exist, even if it's not used. Default is
# "ssh : rsh", but that's not installed.
RUN echo 'plm_rsh_agent = false' >> /mnt/0/openmpi-mca-params.conf
