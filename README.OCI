Notes as we work out the OCI-lite wrapper for Charliecloud
==========================================================

General observations:

  * Buildah seems to expect a pseudoterminal, unless you redirect stdin from
    /dev/null. This might be a good place to start.

  * It seems like it might be hard to reverse-engineer this beyond the
    immediate step that Buildah is trying to take. E.g. if we don't implement
    "create", then we can't get to "start" to see what is expected.

More docs:

https://github.com/containers/buildah/blob/master/docs/buildah.md
https://github.com/containers/buildah/blob/master/docs/buildah-bud.md

Arguments provided to runtime "create" by Buildah:

   see runc create man page: https://raw.githubusercontent.com/opencontainers/runc/master/man/runc-create.8.md

  --bundle DIR           path to directory containing the "bundle directory"
                         e.g.: /tmp/buildah115496812

  --pid-file PATH        "the file to write the process id to"
                         e.g.: /tmp/buildah115496812/pid
                         runtime creates it; why does Buildah care?

                         Buildah says it's waiting for this PID. I think maybe
                         that's so the runtime can create whatever processes
                         it wants and then give the PID of the real container
                         process to Buildah to wait on?

  --no-new-keyring       "do not create a new session keyring"
                         we can probably ignore this

  --console-socket PATH  socket to get the "console's pseudoterminal" FD
                         e.g.: /tmp/buildah115496812/console.sock
                         Buildah creates it
                         charliecloud doesn't have pseudoterminals ...
                         not given if Buildah's stdin is /dev/null

  CONTAINER_ID           e.g.: buildah-buildah115496812

The bundle contains a roots in the mnt directory at create time. 
The bundle isn't visible unless in the same usernamespace as the one in 
which the container is built.

  $ sudo ls -lR .
  .:
  total 12
  -rw------- 1 reidpr reidpr 3154 Mar 22 15:35 config.json
  srwxr-x--- 1 reidpr reidpr    0 Mar 22 15:35 console.sock
  d--------- 2 reidpr reidpr   40 Mar 22 15:35 empty
  -rw-r--r-- 1 reidpr reidpr  200 Mar  9  2015 hosts
  d--x------ 3 reidpr reidpr   60 Mar 22 15:35 mnt
  -rw-r--r-- 1 reidpr reidpr   79 Mar 17 21:39 resolv.conf

  ./empty:
  total 0

  ./mnt:
  total 0
  d--------- 2 reidpr reidpr 40 Mar 22 15:35 rootfs

  ./mnt/rootfs:
  total 0

Observations:

  1. Note the two directories with 000 and 100 permissions. That's weird.
  2. hosts and resolv.conf are identical to the host's.
  3. The directories with 000 permisions are just because this file doesn't really exist in this namespace.

config.json is the meat here I think; this came from "jq . config.json".
Commentary included in-line (note that jq's terminal output is colorized).
Re-ordered to match the documentation [1, 2].

Note that the documentation specifies a number of additional keys, and we
should probably say explicitly what we are doing about each one.

[1]: https://github.com/opencontainers/runtime-spec/blob/master/config.md
[2]: https://github.com/opencontainers/runtime-spec/blob/master/config-linux.md

{
  "ociVersion": "1.0.0",

Ignore this, or validate that it's 1.0.0?

  "root": {
    "path": "/tmp/buildah115496812/mnt/rootfs"
  },

Path to root filesystem. Maps to "ch-run NEWROOT".
If key "readonly" is false or absent, ch-run --write.

  "mounts": [
    {
      "destination": "/dev",
      "type": "tmpfs",
      "source": "/dev",
      "options": [
        "private",
        "strictatime",
        "noexec",
        "nosuid",
        "mode=755",
        "size=65536k"
      ]
    },
    {
      "destination": "/dev/mqueue",
      "type": "mqueue",
      "source": "mqueue",
      "options": [
        "private",
        "nodev",
        "noexec",
        "nosuid"
      ]
    },
    {
      "destination": "/dev/pts",
      "type": "devpts",
      "source": "pts",
      "options": [
        "private",
        "noexec",
        "nosuid",
        "newinstance",
        "ptmxmode=0666",
        "mode=0620"
      ]
    },
    {
      "destination": "/dev/shm",
      "type": "tmpfs",
      "source": "shm",
      "options": [
        "private",
        "nodev",
        "noexec",
        "nosuid",
        "mode=1777",
        "size=65536k"
      ]
    },
    {
      "destination": "/proc",
      "type": "proc",
      "source": "/proc",
      "options": [
        "private",
        "nodev",
        "noexec",
        "nosuid"
      ]
    },
    {
      "destination": "/sys",
      "type": "bind",
      "source": "/sys",
      "options": [
        "rbind",
        "private",
        "nodev",
        "noexec",
        "nosuid",
        "ro"
      ]
    },
    {
      "destination": "/etc/hosts",
      "type": "bind",
      "source": "/tmp/buildah115496812/hosts",
      "options": [
        "rbind"
      ]
    },
    {
      "destination": "/etc/resolv.conf",
      "type": "bind",
      "source": "/tmp/buildah115496812/resolv.conf",
      "options": [
        "rbind"
      ]
    }
  ],

What Buildah gives us above are more or less the existing defaults in ch-run,
though the docs suggest much more flexibility, including stuff that won't work
in user namespace (e.g., mount filesystems backed by a block device). Options
include:

1. Ignore "mounts"; this will probably work for the time being for Buildah.
2. Omit ch-run's default mounts and do only what is specified above.

Probably we should do "--no-home" in OCI mode.

  "process": {
    "terminal": true,

This says that Buildah wants a pseudoterminal allocated. I don't know much
about that. Neither Buildah nor OCI docs are very clear about how this works.

It seems like the pseudoterminal isn't actually necessary but further research is required. 

    "cwd": "/",

Maps to "ch-run --cd".

    "args": [
      "/bin/sh",
      "-c",
      "apk add --no-cache bc"
    ],

Maps to "ch-run CMD [ARG ...]".

    "env": [
      "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
      "https_proxy=http://proxyout.lanl.gov:8080",
      "no_proxy=localhost,127.0.0.1,.lanl.gov",
      "HTTP_PROXY=http://proxyout.lanl.gov:8080",
      "HTTPS_PROXY=http://proxyout.lanl.gov:8080",
      "NO_PROXY=localhost,127.0.0.1,.lanl.gov",
      "http_proxy=http://proxyout.lanl.gov:8080"
    ],

Options:

1. Put this in a file and give it to "ch-run --set-env".
2. Augment "--set-env" to take variable names and values on the command line.
3. Ignore it, hoping that the right values pass through.

    "rlimits": [
      {
        "type": "RLIMIT_NOFILE",
        "hard": 1048576,
        "soft": 1048576
      }
    ]

Limits Buildah wants us to set with setrlimit(2). I think we should ignore it.

    "capabilities": {
      ...
    },

This is a long list of capabilities that Buildah wants. Honestly, I think we
can just ignore it.

    "user": {
      "uid": 0,
      "gid": 0
    },
  },

Maps to "ch-run --uid 0 --gid 0".

  "linux": {
    "namespaces": [
      {
        "type": "pid"
      },
      {
        "type": "ipc"
      },
      {
        "type": "mount"
      },
      {
        "type": "user"
      }
    ],

Namespaces that Buildah wants. Charliecloud could easily add IPC, but the PID
namespace is rather messy. I think we should try ignoring this.

    "uidMappings": [
      {
        "hostID": 0,
        "containerID": 0,
        "size": 1
      },
      {
        "hostID": 1,
        "containerID": 1,
        "size": 65536
      }
    ],
    "gidMappings": [
      {
        "hostID": 0,
        "containerID": 0,
        "size": 1
      },
      {
        "hostID": 1,
        "containerID": 1,
        "size": 65536
      }
    ],

This describes the identity map but wants it much larger than Charliecloud's
single entry and asks for container root to be host root, which we can't do. I
believe we should ignore this.

    "maskedPaths": [
      "/proc/acpi",
      "/proc/kcore",
      "/proc/keys",
      "/proc/latency_stats",
      "/proc/timer_list",
      "/proc/timer_stats",
      "/proc/sched_debug",
      "/proc/scsi",
      "/sys/firmware",
      "/sys/fs/cgroup"
    ],

This says to "mask over the provided paths ... so they cannot be read". I
think we should ignore this because the unprivileged user namespace will
provide any necessary protections.

    "readonlyPaths": [
      "/proc/asound",
      "/proc/bus",
      "/proc/fs",
      "/proc/irq",
      "/proc/sys",
      "/proc/sysrq-trigger"
   ]

This says that the given paths should be read-only in the container. I think
we should ignore this, since the unprivileged user namespace will provide any
necessary protections.

  }
}
