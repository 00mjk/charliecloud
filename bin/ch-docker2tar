#!/bin/sh

libexec="$(cd "$(dirname "$0")" && pwd)"
. "${libexec}/base.sh"

# shellcheck disable=SC2034
usage=$(cat <<EOF
Flatten a Docker image into a Charliecloud image tarball.

Usage:

  $ $(basename "$0") IMAGE OUTDIR

You must have sufficient privilege (via sudo) to run the Docker commands.
EOF
)

parse_basic_args "$@"

if [ "$#" -ne 2 ]; then
    usage
fi

image=$1
outdir=$2
tar=${outdir}/$(echo "$image" | sed 's/\//./g').tar
tar_gz=${outdir}/$(echo "$image" | sed 's/\//./g').tar.gz

if [ -z "$CH_BUILDER" ]; then
    echo "You need to define \$CH_BUILDER before running ch-docker2tar"
fi

case $CH_BUILDER in
        docker)  
        # Export the image to tarball.
        echo "exporting"
        cid=$(docker_ create --read-only "$image")
        size=$(docker_ image inspect "$image" --format='{{.Size}}')
        #docker_ ps -af "id=$cid"
        docker_ export "$cid" | pv_ -s "$size" > "$tar"
        docker_ rm "$cid" > /dev/null

        # Add the Docker environment variables in ./environment for later consumption
        # by "ch-run --set-env".
        #
        # 1. mktemp(1) isn't POSIX, but it seemed very likely to be installed if
        #    Docker is, and I couldn't find a more portable way of securely creating
        #    temporary files. (In particular, I would have preferred to pipe in the
        #    data rather than creating and deleting a temporary file.)
        #
        # 2. Blocking factor 1 (-b1) for tar is a bug workaround. Without this switch,
        #    tar 1.26, which is in RHEL, corrupts the tarball instead of appending to
        #    it. This doesn't happen in 1.29 in Debian Stretch, and building GNU tar
        #    from Git source was too hard, so I couldn't bisect a specific commit that
        #    fixed the bug to learn what exactly was going on. (See PR #371.)
        #
        # 3. This assumes that the tarball from Docker does not have a single
        #    top-level directory (i.e., is a tarbomb).
        #

        echo "adding environment"
        temp=$(mktemp --tmpdir ch-docker2tar.XXXXXX)
        docker_ inspect "$image" --format='{{range .Config.Env}}{{println .}}{{end}}' \
        #        > "$temp"
        tar rf "$tar" -b1 -P --xform="s|${temp}|environment|" "$temp"
        rm "$temp"

        # Finish up.
        echo "compressing"
        cat "$tar" | pv_ -s "$size" | gzip_ -6 > "${tar}.gz"
        rm "$tar"
        ls -lh "${tar}.gz"
        ;;
        buildah)
        # Export an OCI image directory.
        buildah --no-uidmap push $image "oci:./oci"

        manifest=$(sed -E 's|^.+"application/vnd.oci.image.manifest.v1\+json","digest":"sha256:([0-9a-f]+)".+$|\1|' oci/index.json)
        echo Manifest: $manifest
        layer_ct=$(grep -Eo 'application/vnd.oci.image.layer.v1.tar' \
            "oci/blobs/sha256/${manifest}" | wc -l)
        echo Layer Count: $layer_ct

        if [[ $layer_ct -ne 1 ]]; then
            echo "one layer required; found $layer_ct" 1>&2
            exit 1
        fi
        echo "Manifest contents: "
        cat oci/blobs/sha256/${manifest}
        echo ""
        layer=$(sed -E 's|^.+"application/vnd.oci.image.layer.v1.(tar\|tar\+gzip)","digest":"sha256:([0-9a-f]+)".+$|\2|' "oci/blobs/sha256/${manifest}")

        # if the output is not the filename
		#if [[ $layer =~ [a-f0-9]* ]]; then
		#	layer=$(sed -E 's|^.+"application/vnd.oci.image.layer.v1.tar\+gzip","digest":"sha256:([0-9a-f]+)".+$|\1|' "oci/blobs/sha256/${manifest}")
        #    echo "Did a thing"
		#fi
        echo Layer: $layer
        file layer
        # Move the layer tarball to the output (not copy, because the OCI image will
        # be deleted when we're done, so OK to break it).
        mv "oci/blobs/sha256/${layer}" "$tar_gz"
        echo "adding environment"
        gunzip "$tar_gz"

        temp=$(mktemp --tmpdir ch-docker2tar.XXXXXX)
        # shellcheck disable=SC1004
        buildah_ inspect --format '{{.OCIv1.Config.Env}}' "$image" | tr -d "[]" | sed -e 's/[ \t][ \t]*/\n/g'  > "$temp"
        echo "" >> "$temp"
        tar rf "$tar" -b1 -P --xform="s|${temp}|environment|" "$temp"

        echo "compressing"
        cat "$tar" | pv_ -s "$size" | gzip_ -6 > "${tar}.gz"
        rm "$tar"
        rm -rf "oci"
        ls -lh "${tar}.gz"
        ;;
esac
